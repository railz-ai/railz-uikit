@use 'sass:string';

// Dimensions
//-------------------------------------------------------------------
// D stands for Dimension

@function space($scale) {
  $base: 8px;
  @return $base * $scale;
}

// Screen size
//-------------------------------------------------------------------
@function screen($size) {
  @if map-has-key($screen-sizes, $size) {
    $size: map-get($screen-sizes, $size);
    @return $size;
  }
  @warn error-message($size, $screen-sizes, 'tokens/_structure.scss');
  @return null;
}

// Z-Index
//-------------------------------------------------------------------
@function z($index, $modifer: '') {
  $z-base: 10;

  @if $index < 0 {
    $index: $index * -1;
    @return #{-1 * pow($z-base, $index) - $modifer};
  }
  @return #{pow($z-base, $index) + $modifer};
}

// Lines
//-------------------------------------------------------------------

@function line-color($color: normal) {
  @if map-has-key($line-colors, $color) {
    $color: map-get($line-colors, $color);
    @return $color;
  }
  @warn error-message($color, $line-colors, 'tokens/_structure.scss');
  @return null;
}

@function line($style: normal) {
  @if map-has-key($lines, $style) {
    $style: map-get($lines, $style);
    @return $style;
  }
  @warn error-message($style, $lines, 'tokens/_structure.scss');
  @return null;
}

@function shadow-line($color: 'dark-1', $edge: 'outline', $stroke-weight: 1px) {
  @if contains(#{$color}, 'dark') {
    $color: line-color(#{$color});
  } @else if contains(#{$color}, 'light') {
    $color: line-color(#{$color});
  } @else if color(#{$color}) {
    $color: color(#{$color});
  } @else {
    $color: $color;
  }

  @if $edge == 'top' {
    @return 0 #{-$stroke-weight} 0 #{$color};
  } @else if $edge == 'left' {
    @return #{-$stroke-weight} 0 0 0 #{$color};
  } @else if $edge == 'right' {
    @return $stroke-weight 0 0 0 #{$color};
  } @else if $edge == 'bottom' {
    @return 0 $stroke-weight 0 0 #{$color};
  } @else if $edge == 'outline' {
    @return inset 0 0 0 $stroke-weight #{$color};
  }

  @warn error-message($color, $line-colors, 'tokens/_structure.scss');
  @return null;
}

// Border Radius
//-------------------------------------------------------------------

@function radius($size) {
  $size: '#{$size}';

  @if map-has-key($radii, $size) {
    $size: map-get($radii, $size);
    @return $size;
  }
  @warn error-message($size, $radii, 'tokens/_structure.scss');
  @return null;
}

// Drop Shadows
//-------------------------------------------------------------------

@function shadow($shadow-style, $shadow-color: 'gray-900', $opacity: 0.4) {
  @if map-has-key($shadows, $shadow-style) {
    @if type-of($shadow-color) != string {
      $shadow-color: $shadow-color;
    } @else {
      $shadow-color: color($shadow-color, $opacity);
    }

    $shadow-style: map-get($shadows, $shadow-style);
    @return #{$shadow-style $shadow-color};
  }
  @warn error-message($shadow-style, $shadows, 'tokens/_structure.scss');
  @return null;
}
