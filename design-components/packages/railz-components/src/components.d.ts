/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { Sum } from './components/railz-nested/types/sum';
export namespace Components {
  interface RailzButton {
    grow?: boolean;
    icon?: string;
    isDisabled?: boolean;
    label: string;
    loading?: boolean;
    shape?: string;
    size?: string;
    type?: string;
  }
  interface RailzComponent {
    /**
     * The first name
     * @type string
     * @default ''
     */
    first: string;
    /**
     * The last name
     * @type string
     * @default ''
     */
    last: string;
    /**
     * The middle name
     * @type string
     * @default ''
     */
    middle: string;
  }
  interface RailzIcon {
    icon: string;
    initialSize: number;
    size?: string;
  }
  interface RailzIconButton {
    disabled?: boolean;
    icon: string;
    label?: string;
    loading?: boolean;
    shape?: string;
    size?: string;
  }
  interface RailzInputCheckbox {
    checked?: boolean;
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    indeterminate?: boolean;
    inputId: string;
    instructionalText?: string;
    label: string;
    name: string;
    required: string;
    value: string;
  }
  interface RailzInputRadio {
    checked?: boolean;
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    indeterminate?: boolean;
    inputId: string;
    instructionalText?: string;
    label: string;
    name: string;
    required: string;
    value: string;
  }
  interface RailzInputRadioGroup {
    options: any[];
  }
  interface RailzInputSelect {
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    instructionalText?: string;
    label: string;
    required?: boolean;
    value?: string;
  }
  interface RailzInputText {
    autocomplete?: string;
    disabled?: boolean;
    enterkeyhint?: string;
    error?: boolean;
    errorMessage?: string;
    inputId?: string;
    inputmode?: string | 'text';
    instructionalText?: string;
    label: string;
    maxContentLength?: number;
    maxNumber?: string;
    minContentLength?: number;
    minNumber?: string;
    pattern?: string;
    placeholder?: string;
    prefixIcon?: string;
    required?: boolean;
    type?: string | 'text';
    value?: string;
  }
  interface RailzInputToggle {
    checked?: boolean;
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    indeterminate?: boolean;
    inputId: string;
    instructionalText?: string;
    label: string;
    name: string;
    required: string;
    value: string;
  }
  interface RailzNested {
    /**
     * The list of numbers to sum up
     * @type Sum
     * @default []
     */
    sumList: Sum[];
  }
  interface RailzNestedSum {
    /**
     * The first number to sum up
     * @type number
     * @default 0
     */
    first: number;
    /**
     * The second number
     * @type number
     * @default 0
     */
    second: number;
  }
  interface RailzStatusPill {
    icon?: string;
    label: string;
    status: string;
  }
}
declare global {
  interface HTMLRailzButtonElement extends Components.RailzButton, HTMLStencilElement {}
  var HTMLRailzButtonElement: {
    prototype: HTMLRailzButtonElement;
    new (): HTMLRailzButtonElement;
  };
  interface HTMLRailzComponentElement extends Components.RailzComponent, HTMLStencilElement {}
  var HTMLRailzComponentElement: {
    prototype: HTMLRailzComponentElement;
    new (): HTMLRailzComponentElement;
  };
  interface HTMLRailzIconElement extends Components.RailzIcon, HTMLStencilElement {}
  var HTMLRailzIconElement: {
    prototype: HTMLRailzIconElement;
    new (): HTMLRailzIconElement;
  };
  interface HTMLRailzIconButtonElement extends Components.RailzIconButton, HTMLStencilElement {}
  var HTMLRailzIconButtonElement: {
    prototype: HTMLRailzIconButtonElement;
    new (): HTMLRailzIconButtonElement;
  };
  interface HTMLRailzInputCheckboxElement extends Components.RailzInputCheckbox, HTMLStencilElement {}
  var HTMLRailzInputCheckboxElement: {
    prototype: HTMLRailzInputCheckboxElement;
    new (): HTMLRailzInputCheckboxElement;
  };
  interface HTMLRailzInputRadioElement extends Components.RailzInputRadio, HTMLStencilElement {}
  var HTMLRailzInputRadioElement: {
    prototype: HTMLRailzInputRadioElement;
    new (): HTMLRailzInputRadioElement;
  };
  interface HTMLRailzInputRadioGroupElement extends Components.RailzInputRadioGroup, HTMLStencilElement {}
  var HTMLRailzInputRadioGroupElement: {
    prototype: HTMLRailzInputRadioGroupElement;
    new (): HTMLRailzInputRadioGroupElement;
  };
  interface HTMLRailzInputSelectElement extends Components.RailzInputSelect, HTMLStencilElement {}
  var HTMLRailzInputSelectElement: {
    prototype: HTMLRailzInputSelectElement;
    new (): HTMLRailzInputSelectElement;
  };
  interface HTMLRailzInputTextElement extends Components.RailzInputText, HTMLStencilElement {}
  var HTMLRailzInputTextElement: {
    prototype: HTMLRailzInputTextElement;
    new (): HTMLRailzInputTextElement;
  };
  interface HTMLRailzInputToggleElement extends Components.RailzInputToggle, HTMLStencilElement {}
  var HTMLRailzInputToggleElement: {
    prototype: HTMLRailzInputToggleElement;
    new (): HTMLRailzInputToggleElement;
  };
  interface HTMLRailzNestedElement extends Components.RailzNested, HTMLStencilElement {}
  var HTMLRailzNestedElement: {
    prototype: HTMLRailzNestedElement;
    new (): HTMLRailzNestedElement;
  };
  interface HTMLRailzNestedSumElement extends Components.RailzNestedSum, HTMLStencilElement {}
  var HTMLRailzNestedSumElement: {
    prototype: HTMLRailzNestedSumElement;
    new (): HTMLRailzNestedSumElement;
  };
  interface HTMLRailzStatusPillElement extends Components.RailzStatusPill, HTMLStencilElement {}
  var HTMLRailzStatusPillElement: {
    prototype: HTMLRailzStatusPillElement;
    new (): HTMLRailzStatusPillElement;
  };
  interface HTMLElementTagNameMap {
    'railz-button': HTMLRailzButtonElement;
    'railz-component': HTMLRailzComponentElement;
    'railz-icon': HTMLRailzIconElement;
    'railz-icon-button': HTMLRailzIconButtonElement;
    'railz-input-checkbox': HTMLRailzInputCheckboxElement;
    'railz-input-radio': HTMLRailzInputRadioElement;
    'railz-input-radio-group': HTMLRailzInputRadioGroupElement;
    'railz-input-select': HTMLRailzInputSelectElement;
    'railz-input-text': HTMLRailzInputTextElement;
    'railz-input-toggle': HTMLRailzInputToggleElement;
    'railz-nested': HTMLRailzNestedElement;
    'railz-nested-sum': HTMLRailzNestedSumElement;
    'railz-status-pill': HTMLRailzStatusPillElement;
  }
}
declare namespace LocalJSX {
  interface RailzButton {
    grow?: boolean;
    icon?: string;
    isDisabled?: boolean;
    label?: string;
    loading?: boolean;
    onButtonClick?: (event: CustomEvent<any>) => void;
    shape?: string;
    size?: string;
    type?: string;
  }
  interface RailzComponent {
    /**
     * The first name
     * @type string
     * @default ''
     */
    first?: string;
    /**
     * The last name
     * @type string
     * @default ''
     */
    last?: string;
    /**
     * The middle name
     * @type string
     * @default ''
     */
    middle?: string;
  }
  interface RailzIcon {
    icon?: string;
    initialSize?: number;
    size?: string;
  }
  interface RailzIconButton {
    disabled?: boolean;
    icon?: string;
    label?: string;
    loading?: boolean;
    shape?: string;
    size?: string;
  }
  interface RailzInputCheckbox {
    checked?: boolean;
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    indeterminate?: boolean;
    inputId?: string;
    instructionalText?: string;
    label?: string;
    name?: string;
    required?: string;
    value?: string;
  }
  interface RailzInputRadio {
    checked?: boolean;
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    indeterminate?: boolean;
    inputId?: string;
    instructionalText?: string;
    label?: string;
    name?: string;
    required?: string;
    value?: string;
  }
  interface RailzInputRadioGroup {
    options?: any[];
  }
  interface RailzInputSelect {
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    instructionalText?: string;
    label?: string;
    required?: boolean;
    value?: string;
  }
  interface RailzInputText {
    autocomplete?: string;
    disabled?: boolean;
    enterkeyhint?: string;
    error?: boolean;
    errorMessage?: string;
    inputId?: string;
    inputmode?: string | 'text';
    instructionalText?: string;
    label?: string;
    maxContentLength?: number;
    maxNumber?: string;
    minContentLength?: number;
    minNumber?: string;
    onValueChange?: (event: CustomEvent<any>) => void;
    pattern?: string;
    placeholder?: string;
    prefixIcon?: string;
    required?: boolean;
    type?: string | 'text';
    value?: string;
  }
  interface RailzInputToggle {
    checked?: boolean;
    disabled?: boolean;
    error?: boolean;
    errorMessage?: string;
    indeterminate?: boolean;
    inputId?: string;
    instructionalText?: string;
    label?: string;
    name?: string;
    required?: string;
    value?: string;
  }
  interface RailzNested {
    /**
     * The list of numbers to sum up
     * @type Sum
     * @default []
     */
    sumList?: Sum[];
  }
  interface RailzNestedSum {
    /**
     * The first number to sum up
     * @type number
     * @default 0
     */
    first?: number;
    /**
     * The second number
     * @type number
     * @default 0
     */
    second?: number;
  }
  interface RailzStatusPill {
    icon?: string;
    label?: string;
    status?: string;
  }
  interface IntrinsicElements {
    'railz-button': RailzButton;
    'railz-component': RailzComponent;
    'railz-icon': RailzIcon;
    'railz-icon-button': RailzIconButton;
    'railz-input-checkbox': RailzInputCheckbox;
    'railz-input-radio': RailzInputRadio;
    'railz-input-radio-group': RailzInputRadioGroup;
    'railz-input-select': RailzInputSelect;
    'railz-input-text': RailzInputText;
    'railz-input-toggle': RailzInputToggle;
    'railz-nested': RailzNested;
    'railz-nested-sum': RailzNestedSum;
    'railz-status-pill': RailzStatusPill;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'railz-button': LocalJSX.RailzButton & JSXBase.HTMLAttributes<HTMLRailzButtonElement>;
      'railz-component': LocalJSX.RailzComponent & JSXBase.HTMLAttributes<HTMLRailzComponentElement>;
      'railz-icon': LocalJSX.RailzIcon & JSXBase.HTMLAttributes<HTMLRailzIconElement>;
      'railz-icon-button': LocalJSX.RailzIconButton & JSXBase.HTMLAttributes<HTMLRailzIconButtonElement>;
      'railz-input-checkbox': LocalJSX.RailzInputCheckbox & JSXBase.HTMLAttributes<HTMLRailzInputCheckboxElement>;
      'railz-input-radio': LocalJSX.RailzInputRadio & JSXBase.HTMLAttributes<HTMLRailzInputRadioElement>;
      'railz-input-radio-group': LocalJSX.RailzInputRadioGroup & JSXBase.HTMLAttributes<HTMLRailzInputRadioGroupElement>;
      'railz-input-select': LocalJSX.RailzInputSelect & JSXBase.HTMLAttributes<HTMLRailzInputSelectElement>;
      'railz-input-text': LocalJSX.RailzInputText & JSXBase.HTMLAttributes<HTMLRailzInputTextElement>;
      'railz-input-toggle': LocalJSX.RailzInputToggle & JSXBase.HTMLAttributes<HTMLRailzInputToggleElement>;
      'railz-nested': LocalJSX.RailzNested & JSXBase.HTMLAttributes<HTMLRailzNestedElement>;
      'railz-nested-sum': LocalJSX.RailzNestedSum & JSXBase.HTMLAttributes<HTMLRailzNestedSumElement>;
      'railz-status-pill': LocalJSX.RailzStatusPill & JSXBase.HTMLAttributes<HTMLRailzStatusPillElement>;
    }
  }
}
